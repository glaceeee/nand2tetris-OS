// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
    static Array twoToThe;
    static int qy2;

    /** Initializes the library. */
    function void init() {
        let qy2 = 0; //used in udiv()
        let twoToThe = Array.new(16);
        let twoToThe[0] = 1;
        let twoToThe[1] = 2;
        let twoToThe[2] = 4;
        let twoToThe[3] = 8;
        let twoToThe[4] = 16;
        let twoToThe[5] = 32;
        let twoToThe[6] = 64;
        let twoToThe[7] = 128;
        let twoToThe[8] = 256;
        let twoToThe[9] = 512;
        let twoToThe[10] = 1024;
        let twoToThe[11] = 2048;
        let twoToThe[12] = 4096;
        let twoToThe[13] = 8192;
        let twoToThe[14] = 16384;
        /* HACK = 16 bit 2's complement system */
        let twoToThe[15] = 32767+1;
        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        /* if x is negative, compute 2's complement */
        if(x < 0){
            return ~x + 1;
        }
        else {
            return x;
        }
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum;
        var int shiftedX;
        var int index;
        let sum = 0;
        let shiftedX = x;
        let index = 0;
        
        /* shift -> check if i-th bit is 1 -> if yes: add */
        while(index < 16) {
            if(Math.bit(y,index) = true) {
                let sum = sum + shiftedX;
            }
            let index = index + 1;
            let shiftedX = shiftedX + shiftedX; 
        }

        return sum;
    }

    /** Returns the i-th bit of the 16-bit number x. */
    function boolean bit(int x, int i){
        /* binary AND to see if x[i] is 1 or 0 */
        if((twoToThe[i] & x) = false){
            return false;
        }
        else {
            return true;
        }
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var boolean resultSignNegative;
        var int result;

        /* if either x or y is negative but not both */
        if(((x < 0) | (y < 0)) & (~(((x < 0)) & (y < 0)))){
            let resultSignNegative = true;
        }

        let x = Math.abs(x);
        let y = Math.abs(y);

        let result = Math.udiv(x,y);
        if(resultSignNegative){
            let result = ~(result) + 1;
        }

        let qy2 = 0;
        return result;
    }

    /** Divides 2 unsigned integers */
    function int udiv(int x, int y){
        var int q;

        if(y > x) {return 0;}
        if(y = 0) {do Sys.error(3); return -1;}
        if(x = 0) {return 0;}

        /* check how many times 2*y fits into x & check for overflow */
        if((y+y) < 0){
            return 0;
        }

        let q = Math.udiv(x, y+y);
        if(q = 0){
            let qy2 = 0;
        }
         
        /* can we still take out another factor of y? (we can only ever take out exactly 1 or 0 more) */
        if((x-qy2) < y){
            let qy2 = qy2;
            return q+q;
        }
        else {
            let qy2 = qy2 + y;
            return q+q+1;
        }
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int result;
        var int resultPlusPowerOfTwoSquared;
        var int powerOfTwo;
        let powerOfTwo = 7;

        /* check every single power of 2, starting from 7, going to 0, if adding them to result gets result^2 closer to x or exceeds x 
           if it gets you closer, add it to the result for good, if not, dont */
        while(powerOfTwo > -1) {
            /* compute (result + 2^powerOfTwo)^2 */
            let resultPlusPowerOfTwoSquared = (result + (twoToThe[powerOfTwo]));
            let resultPlusPowerOfTwoSquared = Math.toThePowerOf(resultPlusPowerOfTwoSquared,2);

            /* compute and try new possible value of result, while also making sure it doesn`t overflow */
            if(((resultPlusPowerOfTwoSquared > 0) | (resultPlusPowerOfTwoSquared = 0)) & ((resultPlusPowerOfTwoSquared < x) | (resultPlusPowerOfTwoSquared = x))) {
                let result = result + twoToThe[powerOfTwo];
            }
            let powerOfTwo = powerOfTwo - 1;
        }
        return result;
    }

    function int toThePowerOf(int x, int exponent){
        var int result;
        let result = x;

        /* handle 2 special cases */
        if(exponent = 0){return 1;}
        if(exponent = 1){return result;}

        /* decrement exponent by 1 so while-loop works as expected */
        let exponent = exponent - 1;
        while(exponent > 0) {
            let result = result * x;
            let exponent = exponent - 1;
        }
        return result;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if(a-b > 0) {
            return a;
        }
        else {
            return b;
        }
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if(a-b > 0) {
            return b;
        }
        else {
            return a;
        }
    }
}