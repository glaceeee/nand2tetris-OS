// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Keyboard.jack

/**
 * A library for handling user input from the keyboard.
 */
class Keyboard {
    static Array keyboard;

    /** Initializes the keyboard. */
    function void init() {
        let keyboard = 24576;
        return;
    } 

    /**
     * Returns the character of the currently pressed key on the keyboard;
     * if no key is currently pressed, returns 0.
     *
     * Recognizes all ASCII characters, as well as the following keys:
     * new line = 128 = String.newline()
     * backspace = 129 = String.backspace()
     * left arrow = 130
     * up arrow = 131
     * right arrow = 132
     * down arrow = 133
     * home = 134
     * End = 135
     * page up = 136
     * page down = 137
     * insert = 138
     * delete = 139
     * ESC = 140
     * F1 - F12 = 141 - 152
     */
    function char keyPressed() {
        return keyboard[0];
    }

    /**								
     * Waits until a key is pressed on the keyboard and released,
     * then echoes the key to the screen, and returns the character 
     * of the pressed key.
     */
    function char readChar() {
        var char detectedChar;

        while(keyboard[0] = 0){} //wait for key-press
        let detectedChar = keyboard[0];
        while(keyboard[0] > 0){} //wait for key-release

        /* dont print non-printables */
        if((detectedChar > 31) & (detectedChar < 127)){
            do Output.printChar(detectedChar);
        }

        return detectedChar;
    }

    /**								
     * Displays the message on the screen, reads from the keyboard the entered
     * text until a newline character is detected, echoes the text to the screen,
     * and returns its value. Also handles user backspaces.
     */
    function String readLine(String message) {
        var String line;
        var String lineSaved;
        var char detectedChar;
        var int bufferSize;
        var int index;

        let index = 0;
        let bufferSize = 8;
        let line = String.new(bufferSize);

        do Output.printString(message);

        while(true){
            let detectedChar = Keyboard.readChar();

            /* if detectedChar = newLine, we're done */
            if(detectedChar = 128){ 
                do Output.println();
                return line;
            }

            /* if detectedChar = backspace */
            if(detectedChar = 129){
                if(line.length() > 0){
                    do Output.backSpace();
                    do line.eraseLastChar();
                }   
            }

            /* if we're out of bufferSize, i.e. we can't fit the next detectedChar into 'line', create a new buffer (8 greater than the last), 
             * copy over the values of the old buffer into the new buffer and then finally de-allocate the old buffer */
            if((line.length()) = bufferSize){
                let bufferSize = bufferSize + 8;
                let lineSaved = line;
                let line = String.new(bufferSize);

                let index = 0;
                while(index < (lineSaved.length())){
                    let line = line.appendChar(lineSaved.charAt(index));
                    let index = index + 1;
                }
                
                do lineSaved.dispose();
            }

            if(detectedChar < 128){
                let line = line.appendChar(detectedChar);
            }
        }

        return 0;
    }   

    /**								
     * Displays the message on the screen, reads from the keyboard the entered
     * text until a newline character is detected, echoes the text to the screen,
     * and returns its integer value (until the first non-digit character in the
     * entered text is detected). Also handles user backspaces. 
     */
    function int readInt(String message) {
        var String line;
        var String lineSaved;
        var char detectedChar;
        var int bufferSize;
        var int index;
        var boolean nonDigitOrUnaryOpPrinted; //is true if there has been an instance where we printed a non-digit or non-unary op (unary ops only valid at start of number)

        let index = 0;
        let bufferSize = 8;
        let line = String.new(bufferSize);
        let nonDigitOrUnaryOpPrinted = false;

        do Output.printString(message);

        while(true){
            let detectedChar = Keyboard.readChar();
            /*                  UNARY-OP                                         DIGIT                                   NEWLINE or BACKSPACE              */
            if(((detectedChar = 45) | (detectedChar = 126)) | ((detectedChar > 47) & (detectedChar < 58)) | ((detectedChar = 128) | (detectedChar = 129))){

                if(((detectedChar = 45) | (detectedChar = 126)) & line.length() > 0){
                    let nonDigitOrUnaryOpPrinted = true;
                }

                /* if detectedChar = newLine, we're done */
                if(detectedChar = 128){      
                    do Output.println();           
                    return line.intValue();
                }

                /* if detectedChar = backspace */
                if(detectedChar = 129){   
                    if(line.length() > 0){
                        do Output.backSpace();
                        do line.eraseLastChar();
                    }                    
                }

                /* if we're out of bufferSize, i.e. we can't fit the next detectedChar into 'line', create a new buffer (8 greater than the last), 
                * copy over the values of the old buffer into the new buffer and then finally de-allocate the old buffer */
                if((line.length()) = bufferSize){
                    let bufferSize = bufferSize + 8;
                    let lineSaved = line;
                    let line = String.new(bufferSize);

                    let index = 0;
                    while(index < (lineSaved.length())){
                        let line = line.appendChar(lineSaved.charAt(index));
                        let index = index + 1;
                    }
                            
                    do lineSaved.dispose();
                }

                if((detectedChar < 128) & (~nonDigitOrUnaryOpPrinted)){
                    let line = line.appendChar(detectedChar);
                }
            }
            else{
                let nonDigitOrUnaryOpPrinted = true;
            }
        } 
        return 0;
    }
}