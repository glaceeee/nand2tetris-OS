// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field int length;
    field int allocatedStringBuffer;
    field Array str;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        let length = 0;
        let allocatedStringBuffer = maxLength;

        if(maxLength < 0){
            do Sys.error(14);
        }
        else {
            if(maxLength = 0) {
                return this;
            }
            else {
                let str = Array.new(maxLength);
            } 
        }

        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        if(allocatedStringBuffer > 0){
            /* make sure j isn't out of bounds, else return 0 */
            if(j > (length - 1)){
                do Sys.error(15);
            }
            else {
                return str[j]; 
            }
        }
        else {
            do Sys.error(18);
        }

        return 0;    
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        if(allocatedStringBuffer > 0){
            /* make sure j isn't out of bounds, else return 0 */
            if(j > (length - 1)){
                do Sys.error(16);
            }
            else{
                let str[j] = c;
            }
        }
        else {
            do Sys.error(18);
        }

        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if(allocatedStringBuffer > 0){
            /* make sure string isn't full */
            if(length > allocatedStringBuffer){
                do Sys.error(17);
                return 0;
            }

            /* make sure string allocated memory isn't 0 */
            if(allocatedStringBuffer > 0){
                let str[length] = c; 
                let length = length + 1;
            }
            else{
                do Sys.error(17);
            }
        }
        else {
            do Sys.error(18);
        }

        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if(allocatedStringBuffer > 0){
            /* make sure string isn't empty */
            if(length < 1){
                do Sys.error(18);
            }
            else {
                let str[length] = 0;
                let length = length - 1; 
            }
        }
        else {
            do Sys.error(18);
        }

        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int value;
        var int digit;
        var int index;
        var boolean isNegative;
        let isNegative = false;

        if(allocatedStringBuffer > 0){
            while(index < length){
                if(str[index] = 45){
                    let isNegative = true;
                    let index = index + 1;
                }

                let digit = str[index] - 48; //integer value of ascii value

                /* if we detect a non-digit, return value */
                if((digit < 0) | (digit > 9)){
                    return value;
                }

                let value = value*10 + digit;
                let index = index + 1;
            }

            if(isNegative){
                return ~(value) + 1;
            } 
            else{
                return value;
            }
        }
        else {
            do Sys.error(18);
        }

        return 0;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var int rightMostDigit;
        var int characterRepresentingRightMostDigit;
        var int valAbs;

        if(allocatedStringBuffer > 0){
            let length = 0;

            let valAbs = Math.abs(val);

            let rightMostDigit = ((valAbs - ((valAbs/10)*10))); //valAbs%10
            let characterRepresentingRightMostDigit = rightMostDigit + 48; //ascii value of rightMostDigit

            /* if number is < 10 return its' ascii value */
            if(valAbs < 10){
                if(val < 0){
                    do appendChar(45); //'-'
                    do appendChar(valAbs + 48); //ascii value of val
                }
                else {
                    do appendChar(valAbs + 48); //ascii value of val
                }
            }
            else{
                do setInt(val/10);
                do appendChar(characterRepresentingRightMostDigit);
            }
        }
        else {
            do Sys.error(18);
        }

        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
