// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static Array screen;
    static boolean color;  
    static Array bitMaskFrom;
    static Array twoToThe;

    /** Initializes the Screen. */
    function void init() {
        let screen = 16384;
        let color = true; //i.e. black
        
        /* for drawing horizontal lines */
        let bitMaskFrom = Array.new(16);
        let bitMaskFrom[0] = 1;
        let bitMaskFrom[1] = 3;
        let bitMaskFrom[2] = 7;
        let bitMaskFrom[3] = 15;
        let bitMaskFrom[4] = 31;
        let bitMaskFrom[5] = 63;
        let bitMaskFrom[6] = 127;
        let bitMaskFrom[7] = 255;
        let bitMaskFrom[8] = 511;
        let bitMaskFrom[9] = 1023; 
        let bitMaskFrom[10] = 2047;
        let bitMaskFrom[11] = 4095;
        let bitMaskFrom[12] = 8191;
        let bitMaskFrom[13] = 16383;
        let bitMaskFrom[14] = 32767;
        let bitMaskFrom[15] = -1;

        /* for drawing vertical lines */
        let twoToThe = Array.new(16);
        let twoToThe[0] = 1;
        let twoToThe[1] = 2;
        let twoToThe[2] = 4;
        let twoToThe[3] = 8;
        let twoToThe[4] = 16;
        let twoToThe[5] = 32;
        let twoToThe[6] = 64;
        let twoToThe[7] = 128;
        let twoToThe[8] = 256;
        let twoToThe[9] = 512;
        let twoToThe[10] = 1024;
        let twoToThe[11] = 2048;
        let twoToThe[12] = 4096;
        let twoToThe[13] = 8192;
        let twoToThe[14] = 16384;
        /* HACK = 16 bit 2's complement system */
        let twoToThe[15] = 32767+1;
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int word;
        let word = 0;

        while(word < 8192) {
            let screen[word] = 0;
            let word = word + 1;
        }

        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int value;
        var int newValue; //same value as 'value' but xMod16-th bit is either 0 or 1 according to 'color'
        var int address;
        var int xDiv16;
        var int xMod16;
        var int i;
        var int bit;

        let xDiv16 = x/16;
        let address = (32*y) + xDiv16;
        let xMod16 = x - (16*xDiv16);
        let value = screen[address];
        let i = 0;
        let bit = 1;

        /* if color = true, combine value and newValue with bit-wise OR */
        if(color) {
            /* go to xMod16-th bit in current word at screen[address] */
            while(i < xMod16) {
                let bit = bit + bit;
                let i = i + 1;
            }

            /* if there's NOT already a 1 in the position where bit is supposed to go, add the bit to that position, otherwise don't do that */
            if((~(value | (~bit))) = bit) {
                let screen[address] = value + bit;
            }
            return;
        }

        /* if color = false, combine value and newValue with bit-wise AND */
        if(~color) {
            /* go to xMod16-th bit in current word at screen[address] */
            while(i < xMod16) {
                let bit = bit + bit;
                let i = i + 1;
            }
            /* if there's NOT already a 0 in the position where bit is supposed to go, add the bit to that position, otherwise don't do that */
            if((~(value | (~bit))) = 0) {
                let screen[address] = value - bit;
                
            }
        }

        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int horizontalDistance;
        var int verticalDistance;
        var int diff;
        /* dx and dy, when used in the handling of diagonal lines are strictly >0, since the case of (x1,y1) == (x2,y2) is already handled in horizontal lines */
        var int dx;
        var int dy;
        var int x1Div16;
        var int x2Div16;
        var int x1Mod16;
        var int x2Mod16;
        var int addressBegin;
        var int addressEnd;
        var int address;
        var int previousValue;
        var int bit;
        /* all initialized to 0 by the VM implementation */

        /* make sure we're not trying to draw any illegal lines here */
        if((x1 > 511) | (x2 > 511) | (x1 < 0) | (x2 < 0) | 
           (y1 > 255) | (y2 > 255) | (y1 < 0) | (y2 < 0)) {
            return;
        }

        /* horizontal lines */
        if(y1 = y2) {
            if(x1 < x2){
                /* find bit corresponding to x1 */
                let x1Div16 = x1/16;
                let addressBegin = (32*y1) + x1Div16;
                let x1Mod16 = x1 - (16*x1Div16);

                /* find bit corresponding to x2 */
                let x2Div16 = x2/16;
                let addressEnd = (32*y2) + x2Div16;
                let x2Mod16 = x2 - (16*x2Div16);


                /* if both x1 and x2 in same word */
                /* theres probably a far more efficient way of doing this but its good enough in this case */
                /* handles 'color' implicitly (in Screen.drawPixel) */
                if(addressBegin = addressEnd){
                    while(x1 < (x2+1)){
                        do Screen.drawPixel(x1, y1);
                        let x1 = x1 + 1;
                    }
                    return;
                }

                /* bit-mask word that contains x1 */
                if((x1Mod16 - 1) > -1){
                    /* here to make sure you dont override the previously set pixels in the word at screen[addressBegin] */
                    let previousValue = screen[addressBegin];

                    if(color) {
                        let screen[addressBegin] = (previousValue | (~(bitMaskFrom[x1Mod16 - 1])));
                    }
                    else {
                        let screen[addressBegin] = (previousValue & ((bitMaskFrom[x1Mod16 - 1])));
                    }
                    
                }
                else {
                    if(color){
                        let screen[addressBegin] = -1; 
                    }
                    else {
                        let screen[addressBegin] = 0; 
                    }
                }

                /* fill words that are in between the words that contain x1 and x2 */
                let address = addressBegin + 1;
                while(address < addressEnd) {
                    if(color) {
                        let screen[address] = -1;
                        let address = address + 1;
                    }
                    else {
                        let screen[address] = 0;
                        let address = address + 1;
                    }
                }

                /* bit-mask word that contains x2 */
                /* here to make sure you dont override the previously set pixels in the word at screen[addressBegin] */
                let previousValue = screen[addressEnd];
                if(color) {
                    let screen[addressEnd] = (previousValue | (bitMaskFrom[x2Mod16]));
                }
                else {
                    let screen[addressEnd] = (previousValue & (~(bitMaskFrom[x2Mod16])));
                }
                
                return;
            }
            if(x1 > x2) {
                /* find bit corresponding to x2 */
                let x2Div16 = x2/16;
                let addressBegin = (32*y2) + x2Div16;
                let x2Mod16 = x2 - (16*x2Div16);

                /* find bit corresponding to x1 */
                let x1Div16 = x1/16;
                let addressEnd = (32*y1) + x1Div16;
                let x1Mod16 = x1 - (16*x1Div16);

                /* if both x2 and x1 in same word */
                /* theres probably a more efficient way of doing this (i.e. more bitmasking) but its good enough in this case */
                if(addressBegin = addressEnd){
                    while(x2 < (x1+1)){
                        do Screen.drawPixel(x2, y2);
                        let x2 = x2 + 1;
                    }
                    return;
                }

                /* bit-mask word that contains x2 */
                if((x2Mod16 - 1) > -1){
                    /* here to make sure you dont override the previously set pixels in the word at screen[addressBegin] */
                    let previousValue = screen[addressBegin];

                    if(color) {
                        let screen[addressBegin] = (previousValue | (~(bitMaskFrom[x2Mod16 - 1])));
                    }
                    else {
                        let screen[addressBegin] = (previousValue & ((bitMaskFrom[x2Mod16 - 1])));
                    }
                }
                else {
                    if(color){
                        let screen[addressBegin] = -1; 
                    }
                    else {
                        let screen[addressBegin] = 0; 
                    }
                }

                /* fill words that are in between the words that contain x2 and x1 */
                let address = addressBegin + 1;
                while(address < addressEnd) {
                    if(color) {
                        let screen[address] = -1;
                        let address = address + 1;
                    }
                    else {
                        let screen[address] = 0;
                        let address = address + 1;
                    }
                }

                /* bit-mask word that contains x1 */
                /* here to make sure you dont override the previously set pixels in the word at screen[addressBegin] */
                let previousValue = screen[addressEnd];
                if(color) {
                    let screen[addressEnd] = (previousValue | (bitMaskFrom[x1Mod16]));
                }
                else {
                    let screen[addressEnd] = (previousValue & (~(bitMaskFrom[x1Mod16])));
                }
                return;
            }
            if(x1 = x2){
                do Screen.drawPixel(x1,y1);
                return;
            }
        }
        /* vertical lines */
        if(x1 = x2) {
            if(y1 < y2){
                let x1Div16 = x1/16;
                let addressBegin = (32*y1) + x1Div16;
                let x1Mod16 = x1 - (16*x1Div16);
                let bit = twoToThe[x1Mod16]; //move bit in its right place
                let address = addressBegin; //initialize address

                if(color){
                    while(y1 < (y2+1)){
                        let previousValue = screen[address];
                        let screen[address] = previousValue | bit;
                        let address = address + 32;
                        let y1 = y1 + 1;
                    }
                    return;
                }
                else {
                    while(y1 < (y2+1)){
                        let previousValue = screen[address];
                        let screen[address] = previousValue & (~(bit));
                        let address = address + 32;
                        let y1 = y1 + 1;
                    }
                    return; 
                }
                
            }
            if(y1 > y2) {
                let x1Div16 = x1/16;
                let addressBegin = (32*y1) + x1Div16;
                let x1Mod16 = x1 - (16*x1Div16);
                let bit = twoToThe[x1Mod16]; //move bit in its right place
                let address = addressBegin; //initialize address

                if(color){
                    while(y1 > (y2+1)){
                        let previousValue = screen[address];
                        let screen[address] = previousValue | bit;
                        let address = address - 32;
                        let y1 = y1 - 1;
                    }
                    return;
                }
                else {
                    while(y1 > (y2+1)){
                        let previousValue = screen[address];
                        let screen[address] = previousValue & (~(bit));
                        let address = address - 32;
                        let y1 = y1 - 1;
                    }
                    return; 
                }
            }
            /* unneccessary. just here for the sake of completion */
            if(y1 = y2){
                do Screen.drawPixel(x1,y1);
            }
            return;
        }

        /* diagonal lines */
        /* north-east */
        if((x1 < x2) & (y1 > y2)) {
            let dx = x2 - x1;
            let dy = y1 - y2;

            /* decide if to go RIGHT / UP until you reach (x2,y2) */ 
            while((horizontalDistance < (dx + 1)) & (verticalDistance < (dy + 1))) {
                /* go RIGHT */
                if((diff < 0) | (diff = 0)) {
                    do Screen.drawPixel(x1 + horizontalDistance, y1 - verticalDistance);
                    let horizontalDistance = horizontalDistance + 1;
                    let diff = diff + dy;
                } 
                /* go UP */
                else {
                    do Screen.drawPixel(x1 + horizontalDistance, y1 - verticalDistance);
                    let verticalDistance = verticalDistance + 1;
                    let diff = diff - dx;
                }
            } 
            return;
        }
       
        /* north-west */
        if((x1 > x2) & (y1 > y2)) {
            let dx = x1 - x2;
            let dy = y1 - y2;

            /* decide if to go LEFT / UP until you reach (x2,y2) */ 
            while((horizontalDistance < (dx + 1)) & (verticalDistance < (dy + 1))) {
                /* go LEFT */
                if((diff < 0) | (diff = 0)) {
                    do Screen.drawPixel(x1 - horizontalDistance, y1 - verticalDistance);
                    let horizontalDistance = horizontalDistance + 1;
                    let diff = diff + dy;
                } 
                /* go UP */
                else {
                    do Screen.drawPixel(x1 - horizontalDistance, y1 - verticalDistance);
                    let verticalDistance = verticalDistance + 1;
                    let diff = diff - dx;
                }
            } 
            return;
        }

        /* south-east */
        if((x1 < x2) & (y1 < y2)) {
            let dx = x2 - x1;
            let dy = y2 - y1;
            
            /* decide if to go RIGHT / DOWN until you reach (x2,y2) */ 
            while((horizontalDistance < (dx + 1)) & (verticalDistance < (dy + 1))) {
                /* go RIGHT */
                if((diff < 0) | (diff = 0)) {
                    do Screen.drawPixel(x1 + horizontalDistance, y1 + verticalDistance);
                    let horizontalDistance = horizontalDistance + 1;
                    let diff = diff + dy;
                } 
                /* go DOWN */
                else {
                    do Screen.drawPixel(x1 + horizontalDistance, y1 + verticalDistance);
                    let verticalDistance = verticalDistance + 1;
                    let diff = diff - dx;
                }
            } 
            return;
        }

        /* south-west */
        if((x1 > x2) & (y1 < y2)) {
            let dx = x1 - x2;
            let dy = y2 - y1;

            /* decide if to go LEFT / DOWN until you reach (x2,y2) */ 
            while((horizontalDistance < (dx + 1)) & (verticalDistance < (dy + 1))) {
                /* go LEFT */
                if((diff < 0) | (diff = 0)) {
                    do Screen.drawPixel(x1 - horizontalDistance, y1 + verticalDistance);
                    let horizontalDistance = horizontalDistance + 1;
                    let diff = diff + dy;
                } 
                /* go DOWN */
                else {
                    do Screen.drawPixel(x1 - horizontalDistance, y1 + verticalDistance);
                    let verticalDistance = verticalDistance + 1;
                    let diff = diff - dx;
                }
            } 
            return;
        }
    
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int x1Div16;
        var int x2Div16;
        var int x1Mod16;
        var int x2Mod16;
        var int addressBegin;
        var int addressBeginSave;
        var int addressEnd;
        var int addressEndSave;
        var int address;
        var int previousValue;
        var int yOffset;
        var int y1Save;
        var int bitMaskRangeValue;
        var int range;
        var int index;
        let y1Save = y1;        
        
        /* find bit corresponding to x1 */
        let x1Div16 = x1/16;
        let addressBegin = (32*y1) + x1Div16;
        let x1Mod16 = x1 - (16*x1Div16);

        /* find bit corresponding to x2 */
        let x2Div16 = x2/16;
        let addressEnd = (32*y1) + x2Div16;
        let x2Mod16 = x2 - (16*x2Div16);

        /* if both x1 and x2 in same word */
        if(addressBegin = addressEnd){
            /* handle the case of x1_position = 0 and x2_position = 15 seperatly to avoid overflow */
            if((x2Mod16 - x1Mod16) = 15){
                let screen[addressBegin] = -1;
                return;
            }

            let bitMaskRangeValue = 1; //00000001
            let range = x2Mod16 - x1Mod16 + 1; //how many 1s
            let index = 0;

            /* bitshift until e.g. 0b1000 (for range = 3) or until e.g. 0b100000 (for range = 5) */
            while(index < range){
                let bitMaskRangeValue = bitMaskRangeValue + bitMaskRangeValue;
                let index = index + 1;
            }

            /* by doing this you from e.g. 001000 you make 000111 */
            let bitMaskRangeValue = bitMaskRangeValue - 1;

            /* now shift the 0b1b1 value into its right place, i.e. bitshift by x1Mod16 */
            let index = 0;
            while(index < x1Mod16){
                let bitMaskRangeValue = bitMaskRangeValue + bitMaskRangeValue;
                let index = index + 1;
            }

            /* bitmask for all y-levels */
            let address = addressBegin;
            if(color){
                while(y1 < y2){
                    let previousValue = screen[address];
                    let screen[address] = previousValue | bitMaskRangeValue;
                    let address = address + 32;
                    let y1 = y1 + 1;
                }
            }
            else{
                while(y1 < y2){
                    let previousValue = screen[address];
                    let screen[address] = previousValue & (~(bitMaskRangeValue));
                    let address = address + 32;
                    let y1 = y1 + 1;
                }
            }
            
            return;
        }

        /* bit-mask words that contain x1 */
        let yOffset = 0;
        if((x1Mod16 - 1) > -1){
            while(y1 < y2){
                /* here to make sure you dont override the previously set pixels in the word at screen[addressBegin] */
                let previousValue = screen[addressBegin + yOffset];

                if(color) {
                    let screen[addressBegin + yOffset] = (previousValue | (~(bitMaskFrom[x1Mod16 - 1])));
                }
                else {
                    let screen[addressBegin + yOffset] = (previousValue & ((bitMaskFrom[x1Mod16 - 1])));
                }
                let y1 = y1 + 1;
                let yOffset = yOffset + 32;      
            }
        }
        else {
            while(y1 < y2){
                if(color){
                    let screen[addressBegin + yOffset] = -1; 
                }
                else {
                    let screen[addressBegin + yOffset] = 0; 
                }
                let y1 = y1 + 1;
                let yOffset = yOffset + 32;
            }    
        }


        /* fill words that are in between the words that contain x1 and x2 */
        let y1 = y1Save;
        let addressBeginSave = addressBegin;
        let addressEndSave = addressEnd;
        while(y1 < y2){
            let address = addressBegin + 1;
            while(address < addressEnd) {
                if(color) {
                    let screen[address] = -1;
                    let address = address + 1;
                }
                else {
                    let screen[address] = 0;
                    let address = address + 1;
                }
            }
            
            let addressBegin = addressBegin + 32;
            let addressEnd = addressEnd + 32;
            let y1 = y1 + 1;
        }
               
        /* bit-mask word that contains x2 */
        /* here to make sure you dont override the previously set pixels in the word at screen[addressBegin] */
        let y1 = y1Save;
        let addressEnd = addressEndSave;
        let yOffset = 0;
        while(y1 < y2){
            let previousValue = screen[addressEnd + yOffset];
            if(color) {
                let screen[addressEnd + yOffset] = (previousValue | (bitMaskFrom[x2Mod16]));
            }
            else {
                let screen[addressEnd + yOffset] = (previousValue & (~(bitMaskFrom[x2Mod16])));
            }
            let y1 = y1 + 1;
            let yOffset = yOffset + 32;
        }

        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dy;
        let dy = -1 * r;

        /* make sure we're not drawing an illegal circle. entire circle must be visible on screen */
        if((Math.min(x,y) < r) | (Math.abs(x-511) < r) | (Math.abs(y-255) < r)){
            do Sys.error(13);
            return;
        }

        if(r < 182) {
            while(dy < (r+1)) {
                do Screen.drawLine((x-Math.sqrt((r*r)-(dy*dy))),y+dy,(x+(Math.sqrt((r*r)-(dy*dy)))),y+dy);
                let dy = dy + 1;
            }
        }
        
        return;
    }
}
